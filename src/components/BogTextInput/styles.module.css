@layer base {
  .container {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;

    .input {
      width: 100%;
      padding: 0.5rem;
      background-color: var(--color-solid-bg-sunken);
      border-radius: 0.5rem;
      border: 1px solid var(--color-grey-stroke-weak);
      &:hover:not(:disabled) {
        border-color: var(--color-brand-stroke-strong);
      }
      &:focus {
        outline: none;
        border-color: var(--color-brand-stroke-strong);
      }
      &:disabled {
        border-color: var(--color-grey-off-state);
        cursor: not-allowed;
        opacity: 0.85;
      }
    }
    
    /* Wrapper to position an icon inside the input field */
    .inputWrapper {
      position: relative;
      display: flex;
      align-items: center;

      /* ensure the inner input takes full width */
      .input {
        width: 100%;
        box-sizing: border-box;
      }
    }

    .iconLeft .input {
      padding-left: 2.5rem;
    }

    .iconRight .input {
      padding-right: 2.5rem;
    }

    .iconContainer {
      position: absolute;
      left: 0.6rem;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: var(--color-grey-stroke-strong);
      pointer-events: none; /* non-clickable by default */
    }

    /* If icon should be on the right */
    .iconRight .iconContainer {
      left: auto;
      right: 0.6rem;
    }

    /* When icon is clickable, enable pointer events */
    .clickable {
      pointer-events: auto;
      cursor: pointer;
    }

    .clickable:hover {
      color: var(--color-brand-stroke-strong);
    }

    /* For multi-line inputs, keep the icon vertically near the top-left */
    /* For multi-line inputs, keep the icon vertically near the top-left */
    .iconContainer:has(+ textarea),
    .iconContainer:has(+ .multiline) {
      align-self: flex-start;
      padding-top: 0.6rem;
    }
  }
}
